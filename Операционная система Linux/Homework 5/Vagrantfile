# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # Общие настройки для всех ВМ
  config.vm.box = "ubuntu/jammy64"
  config.vm.synced_folder ".", "/vagrant", disabled: true

  # Общая приватная сеть
  private_network = "192.168.56."

  # Общие скрипты для всех ВМ
  common_script = <<-SCRIPT
    # Обновление пакетов
    sudo apt-get update -y
    sudo apt-get install -y sshpass
    sudo apt-get upgrade -y

    # Настройка SSH сервера
    sudo sed -i 's/^#*Protocol.*/Protocol 2/' /etc/ssh/sshd_config
    sudo sed -i 's/^#*LoginGraceTime.*/LoginGraceTime 10/' /etc/ssh/sshd_config
    sudo sed -i 's/^#*MaxAuthTries.*/MaxAuthTries 2/' /etc/ssh/sshd_config
    sudo sed -i 's/^#*MaxSessions.*/MaxSessions 2/' /etc/ssh/sshd_config
    sudo sed -i 's/^#*PermitEmptyPasswords.*/PermitEmptyPasswords no/' /etc/ssh/sshd_config
    sudo sed -i 's/^#*HostbasedAuthentication.*/HostbasedAuthentication no/' /etc/ssh/sshd_config
    sudo sed -i 's/^#*PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config
    sudo sed -i 's/^#*PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config
    sudo sed -i 's/^#*PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config
    sudo systemctl restart sshd

    # Установка пароля для пользователя ubuntu
    echo 'ubuntu:123456ubuntu' | sudo chpasswd

    # Генерация SSH ключа для пользователя ubuntu
    sudo -u ubuntu mkdir -p /home/ubuntu/.ssh
    sudo -u ubuntu ssh-keygen -t rsa -f /home/ubuntu/.ssh/id_rsa -q -N ""
  SCRIPT

  # Настройка VM1
  config.vm.define "vm1" do |vm1|
    vm1.vm.hostname = "vm1"
    vm1.vm.network "private_network", ip: "#{private_network}10"
    vm1.vm.network "forwarded_port", guest: 3389, host: 3389, auto_correct: true

    vm1.vm.provider "virtualbox" do |vb|
      vb.memory = "2048"
      vb.cpus = 2
    end

    vm1.vm.provision "shell", inline: common_script

    vm1.vm.provision "shell", inline: <<-SCRIPT
      # Установка графического интерфейса и дополнительных пакетов
      sudo apt-get install -y ubuntu-desktop-minimal snap-store chromium

      # Установка XRDP
      sudo apt-get install -y xrdp
      sudo systemctl enable xrdp
      sudo systemctl start xrdp

      # Добавление пользователя ubuntu в группу ssl-cert
      sudo usermod -a -G ssl-cert ubuntu
    SCRIPT

    vm1.vm.provision "shell", run: "once", inline: <<-SCRIPT
      # Убедимся, что sshpass установлен
      sudo apt-get install -y sshpass
      
      # Генерация ключа (если нет)
      sudo -u ubuntu mkdir -p /home/ubuntu/.ssh
      [ -f /home/ubuntu/.ssh/id_rsa ] || sudo -u ubuntu ssh-keygen -t rsa -f /home/ubuntu/.ssh/id_rsa -q -N ""
      
      # Копирование ключа с использованием sshpass
      sshpass -p "123456ubuntu" ssh-copy-id -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/id_rsa.pub ubuntu@vm2
      
      # Проверка подключения
      sudo -u ubuntu ssh -o BatchMode=yes ubuntu@vm2 echo "SSH connection successful!"
  SCRIPT
  end

  # Настройка VM2

  config.vm.define "vm2" do |vm2|
    vm2.vm.hostname = "vm2"
    vm2.vm.network "private_network", ip: "#{private_network}20"

    vm2.vm.provider "virtualbox" do |vb|
      vb.memory = "1024"
      vb.cpus = 1
    end

    vm2.vm.provision "shell", inline: common_script

    vm2.vm.provision "shell", inline: <<-SCRIPT
      # Установка Docker
      sudo apt-get install -y ca-certificates curl gnupg
      sudo install -m 0755 -d /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      sudo chmod a+r /etc/apt/keyrings/docker.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      sudo apt-get update -y
      sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      # Установка Wireguard
      sudo apt-get install -y wireguard-tools

      # Создаем базовую конфигурацию wireguard
      sudo mkdir -p /etc/wireguard
      echo "[Interface]
  PrivateKey = $(wg genkey)
  Address = 10.0.0.1/24
  ListenPort = 51820
  PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth1 -j MASQUERADE
  PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth1 -j MASQUERADE" | sudo tee /etc/wireguard/wg0.conf

      # Запускаем wireguard
      sudo systemctl enable wg-quick@wg0
      sudo systemctl start wg-quick@wg0

      # Установка Wireguard-UI
      sudo docker run -d \
        --name=wireguard-ui \
        -e SENDGRID_API_KEY=SG.fakekey \
        -e EMAIL_FROM_ADDRESS=no-reply@example.com \
        -e EMAIL_FROM_NAME=WireGuard \
        -v /etc/wireguard:/etc/wireguard \
        -v /home/ubuntu/wireguard-ui/db:/app/db \
        -p 5000:5000 \
        --cap-add=NET_ADMIN \
        --cap-add=SYS_MODULE \
        --sysctl="net.ipv4.ip_forward=1" \
        --sysctl="net.ipv4.conf.all.src_valid_mark=1" \
        --restart unless-stopped \
        ngoduykhanh/wireguard-ui:latest

      # Создаем и включаем systemd unit для отслеживания изменений
      echo "[Unit]
  Description=Restart WireGuard on config change
  After=network.target

  [Path]
  PathModified=/etc/wireguard/wg0.conf

  [Service]
  Type=oneshot
  ExecStart=/usr/bin/systemctl restart wg-quick@wg0.service

  [Install]
  WantedBy=multi-user.target" | sudo tee /etc/systemd/system/wireguard-restart.path

      echo "[Unit]
  Description=WireGuard configuration reload

  [Service]
  Type=simple
  ExecStart=/usr/bin/systemctl restart wg-quick@wg0.service" | sudo tee /etc/systemd/system/wireguard-restart.service

      sudo systemctl daemon-reload
      sudo systemctl enable wireguard-restart.path
      sudo systemctl start wireguard-restart.path
    SCRIPT
  end

  # Настройка VM3
  config.vm.define "vm3" do |vm3|
    vm3.vm.hostname = "vm3"
    vm3.vm.network "private_network", ip: "#{private_network}30"

    vm3.vm.provider "virtualbox" do |vb|
      vb.memory = "512"
      vb.cpus = 1
    end

    vm3.vm.provision "shell", inline: common_script

    vm3.vm.provision "shell", inline: <<-SCRIPT
      # Создание пользователя adam
      sudo groupadd adam
      sudo useradd -m -d /home/adam -s /bin/bash -g adam adam
      sudo usermod -aG sudo adam
      echo "adam ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/adam
    SCRIPT
  end
  
  config.vm.provision "shell", run: "always", inline: <<-SCRIPT
    # Добавляем записи в /etc/hosts (без дублирования)
    grep -qxF "#{private_network}10 vm1" /etc/hosts || echo "#{private_network}10 vm1" | sudo tee -a /etc/hosts
    grep -qxF "#{private_network}20 vm2" /etc/hosts || echo "#{private_network}20 vm2" | sudo tee -a /etc/hosts
    grep -qxF "#{private_network}30 vm3" /etc/hosts || echo "#{private_network}30 vm3" | sudo tee -a /etc/hosts

    # Для vm1 - настраиваем SSH доступ
    if [ "$HOSTNAME" = "vm1" ]; then
        # Создаем директорию .ssh если её нет
        sudo -u ubuntu mkdir -p /home/ubuntu/.ssh
        chmod 700 /home/ubuntu/.ssh
        
        # Генерируем ключ
        sudo -u ubuntu ssh-keygen -t rsa -f /home/ubuntu/.ssh/id_rsa -q -N ""
        
        
        # Добавляем ключи хостов в known_hosts
        sudo -u ubuntu ssh-keyscan -H vm2 >> /home/ubuntu/.ssh/known_hosts 2>/dev/null
        sudo -u ubuntu ssh-keyscan -H vm3 >> /home/ubuntu/.ssh/known_hosts 2>/dev/null
        
        # Временно включаем парольную аутентификацию на vm2/vm3 для копирования ключа
        sshpass -p "123456ubuntu" ssh -o StrictHostKeyChecking=no ubuntu@vm2 "
            sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
            sudo systemctl restart ssh
        "
        
        # Копируем ключ
        sshpass -p "123456ubuntu" ssh-copy-id -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/id_rsa.pub ubuntu@vm2
        
        # Возвращаем настройки безопасности
        sshpass -p "123456ubuntu" ssh -o StrictHostKeyChecking=no ubuntu@vm2 "
            sudo sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
            sudo systemctl restart ssh
        "
    fi
    
    # Для vm2/vm3 - добавляем vm1 в known_hosts
    if [ "$HOSTNAME" != "vm1" ]; then
        sudo -u ubuntu mkdir -p /home/ubuntu/.ssh
        chmod 700 /home/ubuntu/.ssh
        sudo -u ubuntu ssh-keyscan -H vm1 >> /home/ubuntu/.ssh/known_hosts 2>/dev/null
    fi
  SCRIPT
  end